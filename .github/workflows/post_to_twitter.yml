name: Post to Twitter

on:
  schedule:
    # Run three times daily (9 AM, 1 PM, 5 PM UTC)
    - cron: '0 9,13,17 * * *'
  workflow_dispatch:
    inputs:
      post_count:
        description: 'Number of posts to publish'
        required: true
        default: '1'
      platform:
        description: 'Platform to post to'
        required: true
        default: 'both'
        type: choice
        options:
          - both
          - x
          - bluesky

jobs:
  post:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Install metrics tracking dependencies
          pip install matplotlib numpy pandas
          
      - name: Generate tweets
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          mkdir -p tweets
          mkdir -p metrics/graphs
          
          # Get today's date for daily tweet file
          TODAY=$(date -u +%Y%m%d)
          TWEET_FILE="tweets/tweets_${TODAY}.txt"
          
          # Check if today's tweet file exists
          if [ -f "$TWEET_FILE" ]; then
            echo "Found existing tweet file for today: $TWEET_FILE"
            # Count number of tweets in the file
            TWEET_COUNT=$(grep -c "---" "$TWEET_FILE" || echo "0")
            echo "File contains approximately $TWEET_COUNT tweets"
            
            # Only generate new tweets if the file has fewer than 5 tweets
            if [ "$TWEET_COUNT" -lt 5 ]; then
              echo "Generating additional tweets to ensure sufficient content"
              python scripts/generate_tweets.py --count 5 --pool-size 12 --platform both
            else
              echo "Sufficient tweets available for today, no need to generate more"
            fi
          else
            echo "No tweet file found for today, generating initial set of tweets"
            # Generate 12 tweets for the day to use across platforms
            python scripts/generate_tweets.py --count 12 --pool-size 12 --platform both
          fi
          
      - name: Post to Twitter
        id: post_tweets
        env:
          # Twitter/X credentials
          X_API_KEY: ${{ secrets.X_API_KEY }}
          X_API_SECRET: ${{ secrets.X_API_SECRET }}
          X_ACCESS_TOKEN: ${{ secrets.X_ACCESS_TOKEN }}
          X_ACCESS_SECRET: ${{ secrets.X_ACCESS_SECRET }}
          X_BEARER_TOKEN: ${{ secrets.X_BEARER_TOKEN }}
        run: |
          # Create logs directory if it doesn't exist
          mkdir -p logs
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # For manual runs, use the specified parameters
            COUNT="${{ github.event.inputs.post_count || '1' }}"
            PLATFORM="x"
            
            echo "Manual run: Posting $COUNT tweets to X..."
            python scripts/post_tweets.py --platform x --count "$COUNT" --similarity-threshold 0.9
          else
            # For scheduled runs, post 1 tweet to X
            COUNT=1
            echo "Posting $COUNT tweet to Twitter."
            
            # First attempt to post tweets with existing content
            OUTPUT=$(python scripts/post_tweets.py --platform x --count $COUNT --similarity-threshold 0.9 2>&1)
            echo "$OUTPUT"
            
            # Check if all tweets were too similar and no posting occurred
            if echo "$OUTPUT" | grep -q "all_tweets_too_similar"; then
              echo "All available tweets were too similar to recent posts. Implementing retry strategy..."
              
              # Try up to 3 times with increasing creativity and count
              for RETRY in {1..3}; do
                echo "Retry attempt $RETRY: Generating fresh tweets with increased creativity..."
                
                # Escalate with each retry
                CREATIVITY="--creative"
                if [ $RETRY -gt 1 ]; then
                  CREATIVITY="--creative --extraunique"
                fi
                
                # Generate more tweets with each retry, with higher temperature
                export OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
                GENERATE_COUNT=12  # Reduced count for faster generation
                RETRY_POOL_SIZE=12  # Smaller pool size for faster processing
                
                echo "Generating $GENERATE_COUNT tweets from pool of $RETRY_POOL_SIZE with $CREATIVITY flags..."
                python scripts/generate_tweets.py --count $GENERATE_COUNT --pool-size $RETRY_POOL_SIZE $CREATIVITY --platform x
                
                echo "Trying again with freshly generated tweets..."
                RETRY_OUTPUT=$(python scripts/post_tweets.py --platform x --count $COUNT --similarity-threshold 0.9 2>&1)
                echo "$RETRY_OUTPUT"
                
                # If this attempt was successful, break the loop
                if ! echo "$RETRY_OUTPUT" | grep -q "all_tweets_too_similar"; then
                  echo "Successfully posted tweets on retry attempt $RETRY!"
                  break
                fi
                
                # If this was the last retry and it failed
                if [ $RETRY -eq 3 ] && echo "$RETRY_OUTPUT" | grep -q "all_tweets_too_similar"; then
                  echo "::warning::Failed to generate unique tweets after multiple retries. Using emergency measures."
                  # Emergency measure: Adjust the similarity threshold
                  echo "Emergency measure: Attempting to post with relaxed similarity requirements..."
                  SIMILARITY_THRESHOLD=0.98
                  python scripts/post_tweets.py --platform x --count $COUNT --similarity-threshold $SIMILARITY_THRESHOLD
                  
                  # If all else fails, use --force as absolute last resort
                  if echo "$RETRY_OUTPUT" | grep -q "all_tweets_too_similar"; then
                    echo "EMERGENCY FALLBACK: Using --force to bypass similarity checks completely"
                    python scripts/post_tweets.py --platform x --count $COUNT --force
                  fi
                fi
              done
            fi
          fi
          
      - name: Commit posted records and metrics
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Force add the tweets directory even if some paths might be ignored
          git add -f tweets/
          
          # Add metrics files if they exist
          if [ -d "metrics" ] && [ "$(ls -A metrics)" ]; then
            git add -f metrics/
            echo "Added metrics files to commit"
          fi
          
          # Only commit if there are changes
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update Twitter posting records and metrics: $(date +'%Y-%m-%d')"
            
            # Try pushing up to 3 times with retries
            MAX_RETRIES=3
            RETRY_COUNT=0
            PUSH_SUCCESS=false
            
            while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$PUSH_SUCCESS" != "true" ]; do
              echo "Push attempt $(($RETRY_COUNT+1))/$MAX_RETRIES"
              if git push origin; then
                PUSH_SUCCESS=true
                echo "Push succeeded!"
              else
                RETRY_COUNT=$(($RETRY_COUNT+1))
                if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                  echo "Push failed, pulling latest changes and retrying in 10 seconds..."
                  git pull --rebase origin || echo "Pull failed but continuing"
                  sleep 10
                else
                  echo "Push failed after $MAX_RETRIES attempts"
                fi
              fi
            done
            
            if [ "$PUSH_SUCCESS" != "true" ]; then
              echo "All push attempts failed. Please check the repository state."
              exit 1
            fi
          fi